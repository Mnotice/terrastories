#!/bin/bash
set -eu

profile="dev"
container="web"

read -p "Setup for offline 'Field Kit' mode, or a mesh network? [y/n] " offline

if [ "$offline" = "y" ] || [ "$offline" = "Y" ]; then
  container="localweb"
  profile="offline"

  read -p "Do you want to set up your own host alias instead of using terrastories.local? [y/n] " set_alias
  if [ "$set_alias" = "y" ] || [ "$set_alias" = "Y" ]; then
    read -p "What do you want your host alias to be? " alias_name
  else
    alias_name="terrastories.local"
  fi
  if ! grep -q "$alias_name" /etc/hosts; then
    echo
    echo "In order for offline Terrastories to work, you need to configure the"
    echo "instance hostnames on your machine."
    echo
    echo "You can manually configure your /etc/hosts file, or you can provide"
    echo "your password when prompted to automatically configure them."
    echo
    echo "Choose one:"
    echo "  (1) Manual"
    echo "  (2) Automatic"
    echo
    read -p "Your choice: " choice

    if [ $choice -eq 2 ]; then
      sudo -- sh -c "echo '# Added by Terrastories\n127.0.0.1 $alias_name\n127.0.0.1 tileserver.$alias_name\n# End of section' >> /etc/hosts"
    else
      echo
      echo "In a new terminal, open /etc/hosts with appropriate write permissions"
      echo "and add the following lines:"
      echo
      echo "  127.0.0.1 $alias_name"
      echo "  127.0.0.1 tileserver.$alias_name"
      echo
      read -p "Please go make those changes now. Press any key to continue or q to quit. " -n 1 k
      if [[ "$k" = "q" ]]; then
        echo "\nQuitting..."
        exit
      fi
    fi
  fi
fi

# Copy .env.sample if .env does not exist
if [ ! -f .env ]; then
  cp .env.example .env
fi

if ! grep -q "HOST_ALIAS" .env; then
  sudo -- sh -c "echo '\nHOST_ALIAS=$alias_name' >> .env"
else
  sudo sed -i '/HOST_ALIAS/d' .env
  sudo -- sh -c "echo '\nHOST_ALIAS=$alias_name' >> .env"
fi

## init db
docker compose run --rm db postgres --version

## start db
docker compose up -d db

## build app
docker compose --profile $profile build

## setup and seed database
docker compose --profile $profile run --rm $container bin/rails db:migrate db:seed

## run yarn
docker compose --profile $profile run --rm $container yarn

echo
echo "Welcome to Terrastories!"
echo

if [[ "$profile" = "dev" ]]; then
  echo "!! Note: Terrastories requires a Mapbox Access Token for the mapping capabilities to work."
  echo "         Please update the \`/rails/.env\` file with a valid Mapbox access token."
  echo "         Ask a steward for help if you are unsure or need one provided."
  echo
fi
echo "Boot up your Terrastories instance with the following command:"
echo
echo "  docker compose --profile $profile up"
