#!/bin/bash
set -eu

profile="offline"
container="localweb"

Green='\033[0;32m'
Purple='\033[0;35m'
BoldGreen='\033[1;32m'
BoldPurple='\033[1;35m'
ColorOff='\033[00m'

echo -e "${BoldPurple}Configure for Offline Field Kit${ColorOff}"

echo
echo "Field Kit mode runs 'offline' or disconnected from the internet."
echo

if [ ! -f tileserver/data/styles/style.json ]; then
  echo
  echo -e "${Purple}==> Configure Local Tileserver${ColorOff}"
  echo "A local Tileserver is required to run offline. You can use the"
  echo "Terrastories default offline map tiles, or you can generate your own."
  echo

  read -p "Use default offline map tiles? This will overwrite any files already in tileserver/data [y/n] " default
  if [ "$default" = "y" ] || [ "$default" = "Y" ]; then
    echo
    printf "Downloading and configuring default offline tiles..."
    if [ ! -f tmp ]; then
      git clone --quiet "https://github.com/Terrastories/default-offline-map/" tmp
    fi
    cp -r tmp/fonts/* tileserver/data/fonts
    cp tmp/sprites/* tileserver/data/sprites
    cp tmp/styles/* tileserver/data/styles
    rm -rf tmp
    curl -fsSL "https://bit.ly/39EdYoQ" -o "tileserver/data/mbtiles/tiles.mbtiles" --create-dirs
    echo -e "...${Green}done!${ColorOff}"
  fi
fi

if ! grep -q "terrastories.local" /etc/hosts; then
  echo
  echo -e "${Purple}==> Configure terrastories.local for network or hotspot${ColorOff}"
  echo "How will users access Terrastories from this device?"
  echo "Via a local WiFi Hotspot generated by the device"
  echo "Via a local network which the device is connected to"
  echo
  echo "Choose one:"
  echo "  (1) Hotspot"
  echo "  (2) Network"
  echo
  read -p "Your choice: " choice

  if [ $choice -eq 2 ]; then
    echo
    printf "Automatically configuring terrastories.local..."
    sudo -- sh -c "echo '# Added by Terrastories\n127.0.0.1 terrastories.local\n# End of section' >> /etc/hosts"
    echo -e "...${Green}done!${ColorOff}"
  elif [ $choice -eq 1 ]; then
    echo
    printf "Automatically configuring terrastories.local as a host..."
    #sudo -- sh -c "echo '# Added by Terrastories\n192.168.0.1 terrastories.local\n# End of section' >> /etc/hosts"
    echo -e "...${Green}done!${ColorOff}"
    echo
    if [ -f /etc/NetworkManager/system-connections/Hotspot.nmconnection ]; then
      echo
      printf "Configuring your hotspot settings..."
      if ! sudo grep -q "192.168.0.1/24" /etc/NetworkManager/system-connections/Hotspot.nmconnection; then
        sudo sed -i "s/address1=.*/address1=192.168.0.1\/24/g" /etc/NetworkManager/system-connections/Hotspot.nmconnection
      fi
      echo -e "...${Green}done!${ColorOff}"
      echo
    else
      echo
      echo "Unable to detect your system hotspot connections file."
      echo "Please consult the documentation at https://docs.terrastories.app"
      echo
      read -p "Please go make those changes now. Press any key to continue or q to quit. " -n 1 k
      if [[ "$k" = "q" ]]; then
        echo
        echo "Quitting..."
        exit
      fi
    fi
  fi
fi

# Copy .env.sample if .env does not exist
if [ ! -f .env ]; then
  cp .env.example .env
fi

## init db
docker compose run --rm db postgres --version

## start db
docker compose up -d db

## build app
docker compose --profile $profile build

## setup and seed database
docker compose --profile $profile run --rm $container bin/rails db:migrate db:seed

## run yarn
docker compose --profile $profile run --rm $container yarn

echo
echo -e "${BoldGreen}Welcome to Terrastories!$ColorOff"
echo

if [ $choice -eq 1 ]; then
  echo "There may be some additional manual steps to allow access to"
  echo "Terrastories through your device hotspot."
  echo
  echo "Please consult the documentation at https://docs.terrastories.app"
fi

echo "Boot up your Terrastories instance with the following command:"
echo
echo "  docker compose --profile $profile up"
echo
